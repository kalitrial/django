"""
simple custom tag to retrieve the total posts published in the blog
"""

from django import template

register = template.Library()

from ..models import Post
from django.db.models import Count
from django.utils.safestring import mark_safe
import markdown

# Each template tag module needs to contain a variable called `register` to be a valid tag library and `@register.simple_tag` to
# define the function as a simple tag and regiter it

# Django will use the function name as the tag name or a specified name ie `@register.simple_tag(name='tot_tag')`
@register.simple_tag
def total_posts():
    return Post.published.count()

"""Using inclusion tags you can render a template with context variable returned by your template tag"""
@register.inclusion_tag('blog/post/latest_posts.html')
def show_latest_posts(count=5):
    latest_posts = Post.published.order_by('-publish')[:count]
    return {'latest_posts': latest_posts}


"""creating an assignment tag( are like simple tags but they store the result in a given variable)
Assigment tag to display the most commented posts"""

@register.assignment_tag
def get_most_commented_post(count=5):

    """`annotate()` function uses the Count aggregation function to a QuerySet aggregating the total number of comments
    for each post in a total_comment field"""
    return Post.published.annotate(
        total_comments=Count('comments')
    ).order_by('-total_comments')[:count]

"""Django escapes the HTML code generated by filters. We use the mark_safe function provided by Django to mark the result
as safe HTML to be rendered in the template. By default Django will not trust any HTML code and will escape it before placing
it into output with the only exception being variables that are marked safe from escaping"""
@register.filter(name='markdown')
def markdown_formart(text):
    return mark_safe(markdown.markdown(text))